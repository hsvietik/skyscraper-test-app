{"version":3,"file":"static/js/443.2990da0f.chunk.js","mappings":"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","sources":["components/Forms/Forms.styled.jsx","helpers/validationSchema.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","redux/contacts/selectors.js","components/Forms/ContactForm.jsx","components/ContactList/NoContactsMessage.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Colors } from '../../helpers/colors';\n\nexport const StyledForm = styled.form`\n  width: 300px;\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 30px;\n  border-radius: 6px;\n  background-color: ${Colors.green};\n`;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: #e1d5bb;\n  &:focus,\n  &:hover {\n    outline: solid 2px ${Colors.yellow};\n  }\n`;\nexport const FormButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 6px;\n  color: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  padding: 8px;\n  background-color: ${Colors.yellow};\n  &:focus,\n  &:hover {\n    background-color: ${Colors.yellowHover};\n  }\n`;\nexport const ErrorMessage = styled.p`\n  margin: 0px;\n  padding: 0px;\n`;\n","import * as yup from 'yup';\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport const loginSchema = yup\n  .object()\n  .shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport const contactAddSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    number: yup\n      .string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Number is required'),\n  })\n  .required();\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport const SearchInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: #e1d5bb;\n  &:focus,\n  &hover {\n    outline: solid 2px #c7a149;\n  }\n`;\n","import { SearchForm, SearchInput } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <SearchForm>\n      <h2>Find contact by name</h2>\n      <SearchInput\n        name=\"search\"\n        type=\"text\"\n        onChange={evt =>\n          dispatch(setFilter(evt.currentTarget.value.toLowerCase()))\n        }\n      />\n    </SearchForm>\n  );\n};\n","import styled from '@emotion/styled';\nexport const Table = styled.table`\n  border-collapse: collapse;\n`;\n","import styled from '@emotion/styled';\nimport { FaTrash } from 'react-icons/fa';\nimport { Colors } from '../../helpers/colors';\n\nexport const TableRow = styled.tr`\n  &:hover,\n  &:focus {\n    background-color: ${Colors.headerBackground};\n  }\n`;\n\nexport const TableData = styled.td`\n  padding: 5px;\n`;\n\nexport const DeleteButton = styled.button`\n  display: inline-block;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  background-color: transparent;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  color: inherit;\n`;\n\nexport const DeleteIcon = styled(FaTrash)`\n  width: 15px;\n  height: 15px;\n  color: ${Colors.green};\n  &:hover,\n  &:focus {\n    color: ${Colors.greenHover};\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport {\n  TableRow,\n  TableData,\n  DeleteButton,\n  DeleteIcon,\n} from './Contact.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const Contact = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n  return (\n    <TableRow>\n      <TableData> {name}</TableData>\n      <TableData> {number}</TableData>\n      <TableData>\n        <DeleteButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n          <DeleteIcon />\n        </DeleteButton>\n      </TableData>\n    </TableRow>\n  );\n};\n","import { Table } from './ContactList.styled';\nimport { Contact } from '../Contact/Contact';\n\nexport const ContactList = ({ contacts }) => {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Number</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {contacts.map(contact => {\n          return <Contact contact={contact} key={contact.id} />;\n        })}\n      </tbody>\n    </Table>\n  );\n};\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contactcontactss.isLoading;\nexport const getError = state => state.tasks.error;\nexport const getFilter = state => state.filter;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Forms.styled';\nimport { getContacts } from '../../redux/contacts/selectors.js';\nimport { addContact } from '../../redux/contacts/operations.js';\nimport { setFilter } from '../../redux/contacts/filterSlice.js';\nimport { contactAddSchema } from '../../helpers/validationSchema';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getContacts);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', number: '' },\n    resolver: yupResolver(contactAddSchema),\n  });\n\n  const onSubmit = ({ name, number }) => {\n    const contactExists = contacts.find(contact => contact.name === name);\n    if (contactExists) {\n      toast.error(`${name} is already in contacts`);\n      reset();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    dispatch(setFilter(''));\n    reset();\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"number\">Number</label>\n        <StyledInput {...register('number')} type=\"tel\" id=\"number\" />\n        <ErrorMessage>{errors.number?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </StyledForm>\n      <Toaster />\n    </>\n  );\n}\n","import React from 'react';\n\nexport function NoContactsMessage() {\n  return <p>There are no contacts</p>;\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/Forms/ContactForm';\nimport { NoContactsMessage } from '../components/ContactList/NoContactsMessage';\nimport { getContacts, getFilter } from '../redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nfunction Contacts() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  let filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter)\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <section>\n      <h2>Add contact using the form below </h2>\n      <ContactForm />\n      <Filter />\n      {filteredContacts.length > 0 ? (\n        <ContactList contacts={filteredContacts} />\n      ) : (\n        <NoContactsMessage />\n      )}\n    </section>\n  );\n}\n\nexport default Contacts;\n"],"names":["StyledForm","styled","Colors","StyledInput","FormButton","ErrorMessage","registrationSchema","yup","shape","name","matches","required","email","password","min","loginSchema","contactAddSchema","number","SearchForm","SearchInput","Filter","dispatch","useDispatch","type","onChange","evt","setFilter","currentTarget","value","toLowerCase","Table","TableRow","TableData","DeleteButton","DeleteIcon","FaTrash","Contact","contact","id","onClick","deleteContact","ContactList","contacts","map","getContacts","state","items","getFilter","filter","ContactForm","useSelector","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onSubmit","find","toast","addContact","htmlFor","message","NoContactsMessage","filteredContacts","includes","useEffect","fetchContacts","length"],"sourceRoot":""}