{"version":3,"file":"static/js/853.05ebe927.chunk.js","mappings":"iRAGaA,EAAaC,EAAAA,GAAAA,KAAH,6KAODC,EAAAA,EAAAA,OAGTC,EAAcF,EAAAA,GAAAA,MAAH,yJAMCC,EAAAA,EAAAA,QAGZE,EAAaH,EAAAA,GAAAA,OAAH,kQAQDC,EAAAA,EAAAA,OAGEA,EAAAA,EAAAA,aAGXG,EAAeJ,EAAAA,GAAAA,EAAH,wD,sHCnCZK,EAAqBC,EAAAA,KAE/BC,MAAM,CACLC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,oBACZC,MAAOL,EAAAA,KAAaK,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUN,EAAAA,KAEPO,IAAI,EAAG,+CACPH,SAAS,0BAEbA,WAEUI,EAAcR,EAAAA,KAExBC,MAAM,CACLI,MAAOL,EAAAA,KAAaK,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUN,EAAAA,KAEPO,IAAI,EAAG,+CACPH,SAAS,0BAEbA,WAEUK,EAAmBT,EAAAA,KAE7BC,MAAM,CACLC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,oBACZM,OAAQV,EAAAA,KAELG,QACC,6EACA,gGAEDC,SAAS,wBAEbA,U,wKC/BI,SAASO,IAAgB,IAAD,MACvBC,GAAWC,EAAAA,EAAAA,MAGjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEb,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDU,UAAUC,EAAAA,EAAAA,GAAYlB,EAAAA,MANtBmB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAmBF,OACE,iCACE,UAAC,KAAD,CAAYC,SAAUJ,GAfT,SAAC,GAA+B,IAA7BjB,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/BM,GAASY,EAAAA,EAAAA,IAAW,CAAEtB,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KAChCmB,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAc,gCAApB,IACLC,OAAM,SAAAC,GAAC,MACA,wCAANA,EACIF,EAAAA,GAAAA,MAAY,8CACZA,EAAAA,GAAAA,MAAY,2CAHV,IAKVL,GAED,IAIG,WACE,kBAAOQ,QAAQ,OAAf,mBACA,SAAC,MAAD,kBAAiBZ,EAAS,SAA1B,IAAmCa,KAAK,OAAOC,GAAG,WAClD,SAAC,KAAD,oBAAeZ,EAAOlB,YAAtB,aAAe,EAAa+B,WAC5B,kBAAOH,QAAQ,QAAf,oBACA,SAAC,MAAD,kBAAiBZ,EAAS,UAA1B,IAAoCa,KAAK,QAAQC,GAAG,YACpD,SAAC,KAAD,oBAAeZ,EAAOf,aAAtB,aAAe,EAAc4B,WAC7B,kBAAOH,QAAQ,WAAf,uBACA,SAAC,MAAD,kBAAiBZ,EAAS,aAA1B,IAAuCa,KAAK,WAAWC,GAAG,eAC1D,SAAC,KAAD,oBAAeZ,EAAOd,gBAAtB,aAAe,EAAiB2B,WAChC,SAAC,KAAD,CAAYF,KAAK,SAAjB,0BAEF,SAAC,KAAD,MAGL,CCjDD,MATA,WACE,OACE,iCACE,+CACA,SAACpB,EAAD,MAGL,C","sources":["components/Forms/Forms.styled.jsx","helpers/validationSchema.js","components/Forms/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Colors } from '../../helpers/colors';\n\nexport const StyledForm = styled.form`\n  width: 300px;\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 30px;\n  border-radius: 6px;\n  background-color: ${Colors.green};\n`;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: #e1d5bb;\n  &:focus,\n  &:hover {\n    outline: solid 2px ${Colors.yellow};\n  }\n`;\nexport const FormButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 6px;\n  color: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  padding: 8px;\n  background-color: ${Colors.yellow};\n  &:focus,\n  &:hover {\n    background-color: ${Colors.yellowHover};\n  }\n`;\nexport const ErrorMessage = styled.p`\n  margin: 0px;\n  padding: 0px;\n`;\n","import * as yup from 'yup';\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport const loginSchema = yup\n  .object()\n  .shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport const contactAddSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    number: yup\n      .string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Number is required'),\n  })\n  .required();\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\n// import { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport toast, { Toaster } from 'react-hot-toast';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Forms.styled';\n\nimport { createUser } from '../../redux/auth/authOperations';\n\nimport { registrationSchema } from '../../helpers/validationSchema';\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n  // const navigate = useNavigate();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n    resolver: yupResolver(registrationSchema),\n  });\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(createUser({ name, email, password }))\n      .unwrap()\n      .then(() => toast.success('Account successfully created!'))\n      .catch(e =>\n        e === 'Request failed with status code 400'\n          ? toast.error('This user already exist! Use Log In button')\n          : toast.error('Something went wrong, try one nore time!')\n      );\n    reset();\n    // navigate('/contacts', { replace: true });\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Register</FormButton>\n      </StyledForm>\n      <Toaster />\n    </>\n  );\n}\n","import React from 'react';\nimport { RegisterForm } from '../components/Forms/RegisterForm';\n\nfunction Register() {\n  return (\n    <>\n      <h3>Create an account</h3>\n      <RegisterForm />\n    </>\n  );\n}\n\nexport default Register;\n"],"names":["StyledForm","styled","Colors","StyledInput","FormButton","ErrorMessage","registrationSchema","yup","shape","name","matches","required","email","password","min","loginSchema","contactAddSchema","number","RegisterForm","dispatch","useDispatch","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onSubmit","createUser","unwrap","then","toast","catch","e","htmlFor","type","id","message"],"sourceRoot":""}